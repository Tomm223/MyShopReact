{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0437\\u0430\\u0434\\u0430\\u0447\\u043D\\u0438\\u043AJS\\\\CLONES\\\\MYSHOPFREE\\\\myShopReact\\\\ReactShop\\\\react-shop\\\\src\\\\components\\\\Registration\\\\FormPost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useRef } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountContext } from \"../../Context/AccountProvider\";\nimport { AuthContext } from \"../../Context/AuthProvider\";\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\";\nimport { useForm, Controller } from 'react-hook-form';\nimport ReactSelect from 'react-select';\nimport FormInput from '../UI/Form/Form';\nimport { SelectReact, ParamsForm } from '../UI/Form/Form';\nimport { ErrorsMessage } from \"../UI/Form/ErrorsMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst inputErr = str => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: [\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0432 \\u043F\\u043E\\u043B\\u0435 \", /*#__PURE__*/_jsxDEV(\"span\", {\n    children: str\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 44\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 27\n}, this);\n\nconst inputNull = () => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: \"\\u041F\\u043E\\u043B\\u0435 \\u043E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u043A \\u0437\\u0430\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u0438\\u044E\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 25\n}, this);\n\nconst EmailError = () => alert('Email-адресс уже зарегестрирован');\n\n_c = EmailError;\nconst paramsHook = {\n  required: \"Поле обязательно к заполнению\",\n  minLength: {\n    value: 3,\n    message: \"Минимум 3 символов\"\n  }\n};\nconst paramEmal = {\n  required: \"Поле обязательно к заполнению\",\n  pattern: {\n    value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\n    message: \"Пожалуйста введите валидный email\"\n  }\n};\n\nfunction FormPost() {\n  _s();\n\n  const {\n    usSetCheckId\n  } = useContext(AccountContext);\n  const {\n    singIn,\n    fromPage\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const NavigateTo = () => navigate(fromPage, {\n    replace: true\n  });\n\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset,\n    control,\n    setFocus,\n    setError\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  const useSubmitData = async data => {\n    const MassUsers = await GetAxios('userCard');\n    const massEmailMatch = await MassUsers.filter(item => item.email == data.email);\n\n    if (massEmailMatch.length) {\n      setFocus(\"email\");\n      setError('email', {\n        message: \"Email-адресс уже зарегестрирован\"\n      });\n    } else {\n      const body = {\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        password: data.password,\n        address: data.address\n      };\n      const postedUser = await PostAxios('userCard', body);\n      singIn(postedUser, NavigateTo);\n      usSetCheckId(false);\n      reset();\n    }\n  };\n\n  const formReg = [{\n    title: \"Адресс Электронной почты\",\n    regist: \"email\"\n  }, {\n    title: \"Имя\",\n    regist: \"firstName\"\n  }, {\n    title: \"Фамилия\",\n    regist: \"lastName\"\n  }, {\n    title: \"Пароль\",\n    regist: \"password\"\n  }, {\n    title: \"Страна\",\n    regist: \"address.country\",\n    registArray: ['address', 'country']\n  }, {\n    title: \"Город\",\n    regist: \"address.city\",\n    registArray: ['address', 'city']\n  }, {\n    title: \"Улица\",\n    regist: \"address.street\",\n    registArray: ['address', 'street']\n  }, {\n    title: \"Дом\",\n    regist: \"address.house\",\n    registArray: [\"address\", \"house\"]\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(useSubmitData),\n      class: \"reg__form\",\n      children: [formReg.map(item => {\n        let registQuery = '';\n        let checkInput = true;\n\n        if (item.registArray) {\n          registQuery = item.registArray;\n          if (item.registArray[1] == \"country\") checkInput = false;\n        } else if (!item.registArray) {\n          registQuery = item.regist;\n        }\n\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", checkInput ? /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"reg__label\",\n            children: [item.title, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"reg__input\",\n              ...register(item.regist, ParamsForm(item.regist))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(ErrorsMessage, {\n              errors: errors,\n              regist: registQuery\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 22\n          }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"reg__label\",\n            children: [\" \", item.title, \":\", /*#__PURE__*/_jsxDEV(Controller, {\n              control: control,\n              name: item.regist,\n              rules: ParamsForm(item.regist),\n              render: _ref => {\n                let {\n                  field: {\n                    onChange,\n                    value\n                  },\n                  fieldState: {\n                    error\n                  }\n                } = _ref;\n                return /*#__PURE__*/_jsxDEV(SelectReact, {\n                  onChange: onChange,\n                  value: value,\n                  error: error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 31\n                }, this);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"reg__btn\",\n        type: \"submit\",\n        children: \"\\u0437\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\n_s(FormPost, \"vCAdLJlg9hW0wqjSmqnqG5282VA=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c2 = FormPost;\nexport default FormPost;\n/*//const getValueSelect = (value) => value ? options.find((option) => option.value == value) : ''\r\n               <div className=\"reg__error\"> {errors?.['email'] && <div>{errors?.['email']?.message || inputErr('Email')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.firstName && <div>{errors?.firstName?.message || inputErr('firstName')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.lastName && <div>{errors?.lastName?.message || inputErr('lastName')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.password && <div>{errors?.password?.message || inputErr('password')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.address?.city && <div>{errors?.address.city?.message || inputErr('password')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.address?.house && <div>{errors?.address.house?.message || inputErr('password')}</div>} </div>\r\n\r\n\r\n               <div>\r\n                        <ReactSelect placeholder='' options={options} value={getValueSelect(value)} onChange={newValue => onChange(newValue.value)} />\r\n                        <div className=\"reg__error\"> {error && <div>{error?.message || inputErr('address')}</div>} </div>\r\n                     </div>\r\n\r\nconst options = [\r\n   {\r\n      value: \"russia\",\r\n      label: \"Россия\"\r\n   },\r\n   {\r\n      value: \"USA\",\r\n      label: \"США\"\r\n   },\r\n   {\r\n      value: \"beloruss\",\r\n      label: \"Белорусь\"\r\n   },\r\n   {\r\n      value: \"chehia\",\r\n      label: \"Чехия\"\r\n   }\r\n]\r\n\r\nconst paramsHook = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   minLength: {\r\n      value: 3,\r\n      message: \"Минимум 3 символов\"\r\n   }\r\n}\r\nconst paramEmal = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   pattern: {\r\n      value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\r\n      message: \"Пожалуйста введите валидный email\"\r\n   }\r\n}\r\n\r\n*/\n\n/*\r\n\r\n<label class=\"reg__label\" for=\"email\">Адресс Электронной почты:\r\n               <input class=\"reg__input\" id=\"reg__emal\" {...register(\"email\", paramEmal)} type=\"text\" />\r\n               <ErrorsMessage regist=\"email\" errors={errors} checkEmail={chechEmail} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"firstName\">Имя:\r\n               <input class=\"reg__input\" id=\"reg__f-name\" {...register(\"firstName\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"firstName\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"lastName\">Фамилия:\r\n               <input class=\"reg__input\" id=\"reg__l-name\" {...register(\"lastName\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"lastName\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"pass\">Пароль:\r\n               <input class=\"reg__input\" id=\"reg__pass\"  {...register(\"password\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"password\" errors={errors} />\r\n            </label>\r\n            <label className=\"reg__label\"> Страна:\r\n               <Controller control={control} name=\"address.country\" rules={{ required: 'Поле обязательно для заполнения' }}\r\n                  render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                     <SelectReact onChange={onChange} value={value} error={error} />\r\n                  } />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.city\">Город:\r\n               <input class=\"reg__input\"  {...register(\"address.city\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.city\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.street\">Улица:\r\n               <input class=\"reg__input\"   {...register(\"address.street\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.street\" errors={errors} />\r\n               <div className=\"reg__error\"> {errors?.address?.street && <div>{errors?.address.street?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.house\">Дом:\r\n               <input class=\"reg__input\"   {...register(\"address.house\", {\r\n                  required: \"Поле обязательно к заполнению\"\r\n               })} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.house\" errors={errors} />\r\n            </label>\r\n            <button class=\"reg__btn\" type=\"submit\" disabled={!isValid} >зарегестрироваться </button>\r\n\r\n\r\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EmailError\");\n$RefreshReg$(_c2, \"FormPost\");","map":{"version":3,"sources":["C:/задачникJS/CLONES/MYSHOPFREE/myShopReact/ReactShop/react-shop/src/components/Registration/FormPost.jsx"],"names":["React","useState","useEffect","useContext","useRef","useNavigate","AccountContext","AuthContext","GetAxios","PostAxios","useForm","Controller","ReactSelect","FormInput","SelectReact","ParamsForm","ErrorsMessage","inputErr","str","inputNull","EmailError","alert","paramsHook","required","minLength","value","message","paramEmal","pattern","FormPost","usSetCheckId","singIn","fromPage","navigate","NavigateTo","replace","register","formState","errors","handleSubmit","reset","control","setFocus","setError","mode","useSubmitData","data","MassUsers","massEmailMatch","filter","item","email","length","body","firstName","lastName","password","address","postedUser","formReg","title","regist","registArray","map","registQuery","checkInput","field","onChange","fieldState","error"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,sBAApC;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,iBAAxC;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;;AAGA,MAAMC,QAAQ,GAAIC,GAAD,iBAAS;AAAA,mGAAiB;AAAA,cAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B;;AACA,MAAMC,SAAS,GAAG,mBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAxB;;AACA,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAAC,kCAAD,CAA9B;;KAAMD,U;AAGN,MAAME,UAAU,GAAG;AAChBC,EAAAA,QAAQ,EAAE,+BADM;AAEhBC,EAAAA,SAAS,EAAE;AACRC,IAAAA,KAAK,EAAE,CADC;AAERC,IAAAA,OAAO,EAAE;AAFD;AAFK,CAAnB;AAOA,MAAMC,SAAS,GAAG;AACfJ,EAAAA,QAAQ,EAAE,+BADK;AAEfK,EAAAA,OAAO,EAAE;AACNH,IAAAA,KAAK,EAAE,wIADD;AAENC,IAAAA,OAAO,EAAE;AAFH;AAFM,CAAlB;;AAOA,SAASG,QAAT,GAAoB;AAAA;;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAAmB3B,UAAU,CAACG,cAAD,CAAnC;AACA,QAAM;AAAEyB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuB7B,UAAU,CAACI,WAAD,CAAvC;AACA,QAAM0B,QAAQ,GAAG5B,WAAW,EAA5B;;AACA,QAAM6B,UAAU,GAAG,MAAMD,QAAQ,CAACD,QAAD,EAAW;AAAEG,IAAAA,OAAO,EAAE;AAAX,GAAX,CAAjC;;AACA,QAAM;AACHC,IAAAA,QADG;AAEHC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF,KAFR;AAGHC,IAAAA,YAHG;AAIHC,IAAAA,KAJG;AAKHC,IAAAA,OALG;AAMHC,IAAAA,QANG;AAOHC,IAAAA;AAPG,MAQFjC,OAAO,CAAC;AACTkC,IAAAA,IAAI,EAAE;AADG,GAAD,CARX;;AAaA,QAAMC,aAAa,GAAG,MAAOC,IAAP,IAAgB;AACnC,UAAMC,SAAS,GAAG,MAAMvC,QAAQ,CAAC,UAAD,CAAhC;AACA,UAAMwC,cAAc,GAAG,MAAMD,SAAS,CAACE,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAACC,KAAL,IAAcL,IAAI,CAACK,KAA9C,CAA7B;;AACA,QAAIH,cAAc,CAACI,MAAnB,EAA2B;AACxBV,MAAAA,QAAQ,CAAC,OAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC,OAAD,EAAU;AAAEjB,QAAAA,OAAO,EAAE;AAAX,OAAV,CAAR;AACF,KAHD,MAIK;AACF,YAAM2B,IAAI,GAAG;AACVF,QAAAA,KAAK,EAAEL,IAAI,CAACK,KADF;AAEVG,QAAAA,SAAS,EAAER,IAAI,CAACQ,SAFN;AAGVC,QAAAA,QAAQ,EAAET,IAAI,CAACS,QAHL;AAIVC,QAAAA,QAAQ,EAAEV,IAAI,CAACU,QAJL;AAKVC,QAAAA,OAAO,EAAEX,IAAI,CAACW;AALJ,OAAb;AAOA,YAAMC,UAAU,GAAG,MAAMjD,SAAS,CAAC,UAAD,EAAa4C,IAAb,CAAlC;AACAtB,MAAAA,MAAM,CAAC2B,UAAD,EAAaxB,UAAb,CAAN;AACAJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAU,MAAAA,KAAK;AACP;AACH,GApBD;;AAsBA,QAAMmB,OAAO,GAAG,CACb;AACGC,IAAAA,KAAK,EAAE,0BADV;AAEGC,IAAAA,MAAM,EAAE;AAFX,GADa,EAKb;AACGD,IAAAA,KAAK,EAAE,KADV;AAEGC,IAAAA,MAAM,EAAE;AAFX,GALa,EASb;AACGD,IAAAA,KAAK,EAAE,SADV;AAEGC,IAAAA,MAAM,EAAE;AAFX,GATa,EAab;AACGD,IAAAA,KAAK,EAAE,QADV;AAEGC,IAAAA,MAAM,EAAE;AAFX,GAba,EAiBb;AACGD,IAAAA,KAAK,EAAE,QADV;AAEGC,IAAAA,MAAM,EAAE,iBAFX;AAGGC,IAAAA,WAAW,EAAE,CAAC,SAAD,EAAY,SAAZ;AAHhB,GAjBa,EAsBb;AACGF,IAAAA,KAAK,EAAE,OADV;AAEGC,IAAAA,MAAM,EAAE,cAFX;AAGGC,IAAAA,WAAW,EAAE,CAAC,SAAD,EAAY,MAAZ;AAHhB,GAtBa,EA2Bb;AACGF,IAAAA,KAAK,EAAE,OADV;AAEGC,IAAAA,MAAM,EAAE,gBAFX;AAGGC,IAAAA,WAAW,EAAE,CAAC,SAAD,EAAY,QAAZ;AAHhB,GA3Ba,EAgCb;AACGF,IAAAA,KAAK,EAAE,KADV;AAEGC,IAAAA,MAAM,EAAE,eAFX;AAGGC,IAAAA,WAAW,EAAE,CAAC,SAAD,EAAY,OAAZ;AAHhB,GAhCa,CAAhB;AAwCA,sBACG;AAAA,2BACG;AAAM,MAAA,QAAQ,EAAEvB,YAAY,CAACM,aAAD,CAA5B;AAA6C,MAAA,KAAK,EAAC,WAAnD;AAAA,iBACIc,OAAO,CAACI,GAAR,CAAab,IAAD,IAAU;AACpB,YAAIc,WAAW,GAAG,EAAlB;AACA,YAAIC,UAAU,GAAG,IAAjB;;AACA,YAAIf,IAAI,CAACY,WAAT,EAAsB;AACnBE,UAAAA,WAAW,GAAGd,IAAI,CAACY,WAAnB;AACA,cAAIZ,IAAI,CAACY,WAAL,CAAiB,CAAjB,KAAuB,SAA3B,EAAsCG,UAAU,GAAG,KAAb;AACxC,SAHD,MAIK,IAAI,CAACf,IAAI,CAACY,WAAV,EAAuB;AACzBE,UAAAA,WAAW,GAAGd,IAAI,CAACW,MAAnB;AACF;;AACD,4BACG;AAAA,0BAAII,UAAU,gBACX;AAAO,YAAA,SAAS,EAAC,YAAjB;AAAA,uBAA+Bf,IAAI,CAACU,KAApC,oBACG;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,SAAS,EAAC,YAA7B;AAAA,iBAA8CxB,QAAQ,CAACc,IAAI,CAACW,MAAN,EAAc9C,UAAU,CAACmC,IAAI,CAACW,MAAN,CAAxB;AAAtD;AAAA;AAAA;AAAA;AAAA,oBADH,eAEG,QAAC,aAAD;AAAe,cAAA,MAAM,EAAEvB,MAAvB;AAA+B,cAAA,MAAM,EAAE0B;AAAvC;AAAA;AAAA;AAAA;AAAA,oBAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBADW,gBAMX;AAAO,YAAA,SAAS,EAAC,YAAjB;AAAA,4BAAgCd,IAAI,CAACU,KAArC,oBACG,QAAC,UAAD;AAAY,cAAA,OAAO,EAAEnB,OAArB;AAA8B,cAAA,IAAI,EAAES,IAAI,CAACW,MAAzC;AAAiD,cAAA,KAAK,EAAE9C,UAAU,CAACmC,IAAI,CAACW,MAAN,CAAlE;AACG,cAAA,MAAM,EAAE;AAAA,oBAAC;AAAEK,kBAAAA,KAAK,EAAE;AAAEC,oBAAAA,QAAF;AAAY1C,oBAAAA;AAAZ,mBAAT;AAA8B2C,kBAAAA,UAAU,EAAE;AAAEC,oBAAAA;AAAF;AAA1C,iBAAD;AAAA,oCACL,QAAC,WAAD;AAAa,kBAAA,QAAQ,EAAEF,QAAvB;AAAiC,kBAAA,KAAK,EAAE1C,KAAxC;AAA+C,kBAAA,KAAK,EAAE4C;AAAtD;AAAA;AAAA;AAAA;AAAA,wBADK;AAAA;AADX;AAAA;AAAA;AAAA;AAAA,oBADH;AAAA;AAAA;AAAA;AAAA;AAAA,kBANH;AAAA,wBADH;AAgBF,OA1BA,CADJ,eA4BG;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAyB,QAAA,IAAI,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BH;AAAA;AAAA;AAAA;AAAA;AAAA;AADH,mBADH;AAkCF;;GAlHQxC,Q;UAGWxB,W,EAUbK,O;;;MAbEmB,Q;AAmHT,eAAeA,QAAf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useRef } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AccountContext } from \"../../Context/AccountProvider\";\r\nimport { AuthContext } from \"../../Context/AuthProvider\";\r\n\r\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\"\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport ReactSelect from 'react-select'\r\nimport FormInput from '../UI/Form/Form'\r\nimport { SelectReact, ParamsForm } from '../UI/Form/Form'\r\nimport { ErrorsMessage } from \"../UI/Form/ErrorsMessage\";\r\n\r\n\r\nconst inputErr = (str) => <p>Ошибка в поле <span>{str}</span></p>\r\nconst inputNull = () => <p>Поле обязательно к заполнению</p>\r\nconst EmailError = () => alert('Email-адресс уже зарегестрирован')\r\n\r\n\r\nconst paramsHook = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   minLength: {\r\n      value: 3,\r\n      message: \"Минимум 3 символов\"\r\n   }\r\n}\r\nconst paramEmal = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   pattern: {\r\n      value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\r\n      message: \"Пожалуйста введите валидный email\"\r\n   }\r\n}\r\nfunction FormPost() {\r\n   const { usSetCheckId } = useContext(AccountContext)\r\n   const { singIn, fromPage } = useContext(AuthContext)\r\n   const navigate = useNavigate()\r\n   const NavigateTo = () => navigate(fromPage, { replace: true })\r\n   const {\r\n      register,\r\n      formState: { errors },\r\n      handleSubmit,\r\n      reset,\r\n      control,\r\n      setFocus,\r\n      setError\r\n   } = useForm({\r\n      mode: \"onChange\"\r\n   })\r\n\r\n\r\n   const useSubmitData = async (data) => {\r\n      const MassUsers = await GetAxios('userCard')\r\n      const massEmailMatch = await MassUsers.filter((item) => item.email == data.email)\r\n      if (massEmailMatch.length) {\r\n         setFocus(\"email\")\r\n         setError('email', { message: \"Email-адресс уже зарегестрирован\" })\r\n      }\r\n      else {\r\n         const body = {\r\n            email: data.email,\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            password: data.password,\r\n            address: data.address\r\n         }\r\n         const postedUser = await PostAxios('userCard', body)\r\n         singIn(postedUser, NavigateTo)\r\n         usSetCheckId(false)\r\n         reset()\r\n      }\r\n   }\r\n\r\n   const formReg = [\r\n      {\r\n         title: \"Адресс Электронной почты\",\r\n         regist: \"email\"\r\n      },\r\n      {\r\n         title: \"Имя\",\r\n         regist: \"firstName\",\r\n      },\r\n      {\r\n         title: \"Фамилия\",\r\n         regist: \"lastName\",\r\n      },\r\n      {\r\n         title: \"Пароль\",\r\n         regist: \"password\",\r\n      },\r\n      {\r\n         title: \"Страна\",\r\n         regist: \"address.country\",\r\n         registArray: ['address', 'country']\r\n      },\r\n      {\r\n         title: \"Город\",\r\n         regist: \"address.city\",\r\n         registArray: ['address', 'city']\r\n      },\r\n      {\r\n         title: \"Улица\",\r\n         regist: \"address.street\",\r\n         registArray: ['address', 'street']\r\n      },\r\n      {\r\n         title: \"Дом\",\r\n         regist: \"address.house\",\r\n         registArray: [\"address\", \"house\"]\r\n      }\r\n   ]\r\n\r\n\r\n   return (\r\n      <>\r\n         <form onSubmit={handleSubmit(useSubmitData)} class=\"reg__form\">\r\n            {formReg.map((item) => {\r\n               let registQuery = ''\r\n               let checkInput = true\r\n               if (item.registArray) {\r\n                  registQuery = item.registArray\r\n                  if (item.registArray[1] == \"country\") checkInput = false\r\n               }\r\n               else if (!item.registArray) {\r\n                  registQuery = item.regist\r\n               }\r\n               return (\r\n                  <> {checkInput ?\r\n                     <label className=\"reg__label\">{item.title}:\r\n                        <input type=\"text\" className=\"reg__input\" {...register(item.regist, ParamsForm(item.regist))} />\r\n                        <ErrorsMessage errors={errors} regist={registQuery} />\r\n                     </label>\r\n                     :\r\n                     <label className=\"reg__label\"> {item.title}:\r\n                        <Controller control={control} name={item.regist} rules={ParamsForm(item.regist)}\r\n                           render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                              <SelectReact onChange={onChange} value={value} error={error} />\r\n                           } />\r\n                     </label>\r\n                  }\r\n                  </>\r\n               )\r\n            })}\r\n            <button class=\"reg__btn\" type=\"submit\" >зарегестрироваться </button>\r\n         </form>\r\n      </>\r\n   )\r\n}\r\nexport default FormPost\r\n\r\n\r\n\r\n\r\n/*//const getValueSelect = (value) => value ? options.find((option) => option.value == value) : ''\r\n               <div className=\"reg__error\"> {errors?.['email'] && <div>{errors?.['email']?.message || inputErr('Email')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.firstName && <div>{errors?.firstName?.message || inputErr('firstName')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.lastName && <div>{errors?.lastName?.message || inputErr('lastName')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.password && <div>{errors?.password?.message || inputErr('password')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.address?.city && <div>{errors?.address.city?.message || inputErr('password')}</div>} </div>\r\n<div className=\"reg__error\"> {errors?.address?.house && <div>{errors?.address.house?.message || inputErr('password')}</div>} </div>\r\n\r\n\r\n               <div>\r\n                        <ReactSelect placeholder='' options={options} value={getValueSelect(value)} onChange={newValue => onChange(newValue.value)} />\r\n                        <div className=\"reg__error\"> {error && <div>{error?.message || inputErr('address')}</div>} </div>\r\n                     </div>\r\n\r\nconst options = [\r\n   {\r\n      value: \"russia\",\r\n      label: \"Россия\"\r\n   },\r\n   {\r\n      value: \"USA\",\r\n      label: \"США\"\r\n   },\r\n   {\r\n      value: \"beloruss\",\r\n      label: \"Белорусь\"\r\n   },\r\n   {\r\n      value: \"chehia\",\r\n      label: \"Чехия\"\r\n   }\r\n]\r\n\r\nconst paramsHook = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   minLength: {\r\n      value: 3,\r\n      message: \"Минимум 3 символов\"\r\n   }\r\n}\r\nconst paramEmal = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   pattern: {\r\n      value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\r\n      message: \"Пожалуйста введите валидный email\"\r\n   }\r\n}\r\n\r\n*/\r\n\r\n/*\r\n\r\n<label class=\"reg__label\" for=\"email\">Адресс Электронной почты:\r\n               <input class=\"reg__input\" id=\"reg__emal\" {...register(\"email\", paramEmal)} type=\"text\" />\r\n               <ErrorsMessage regist=\"email\" errors={errors} checkEmail={chechEmail} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"firstName\">Имя:\r\n               <input class=\"reg__input\" id=\"reg__f-name\" {...register(\"firstName\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"firstName\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"lastName\">Фамилия:\r\n               <input class=\"reg__input\" id=\"reg__l-name\" {...register(\"lastName\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"lastName\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"pass\">Пароль:\r\n               <input class=\"reg__input\" id=\"reg__pass\"  {...register(\"password\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"password\" errors={errors} />\r\n            </label>\r\n            <label className=\"reg__label\"> Страна:\r\n               <Controller control={control} name=\"address.country\" rules={{ required: 'Поле обязательно для заполнения' }}\r\n                  render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                     <SelectReact onChange={onChange} value={value} error={error} />\r\n                  } />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.city\">Город:\r\n               <input class=\"reg__input\"  {...register(\"address.city\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.city\" errors={errors} />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.street\">Улица:\r\n               <input class=\"reg__input\"   {...register(\"address.street\", paramsHook)} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.street\" errors={errors} />\r\n               <div className=\"reg__error\"> {errors?.address?.street && <div>{errors?.address.street?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.house\">Дом:\r\n               <input class=\"reg__input\"   {...register(\"address.house\", {\r\n                  required: \"Поле обязательно к заполнению\"\r\n               })} type=\"text\" />\r\n               <ErrorsMessage regist=\"address.house\" errors={errors} />\r\n            </label>\r\n            <button class=\"reg__btn\" type=\"submit\" disabled={!isValid} >зарегестрироваться </button>\r\n\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}
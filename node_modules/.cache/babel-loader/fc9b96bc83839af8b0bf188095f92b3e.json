{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0437\\u0430\\u0434\\u0430\\u0447\\u043D\\u0438\\u043AJS\\\\CLONES\\\\MYSHOPFREE\\\\myShopReact\\\\ReactShop\\\\react-shop\\\\src\\\\components\\\\UI\\\\Form\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Controller, useForm } from 'react-hook-form';\nimport Select from \"react-select\";\nimport { ErrorSelect } from \"./ErrorsMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: \"russia\",\n  label: \"Россия\"\n}, {\n  value: \"USA\",\n  label: \"США\"\n}, {\n  value: \"beloruss\",\n  label: \"Белорусь\"\n}, {\n  value: \"chehia\",\n  label: \"Чехия\"\n}];\nconst param = {\n  require: \"поле обязательно для заполнения\"\n};\nexport function SelectReact(_ref) {\n  _s();\n\n  let {\n    onChange,\n    value,\n    error\n  } = _ref;\n\n  const getValue = value => value ? options.find(item => item.value == value) : \"\";\n\n  const {\n    control\n  } = useForm({\n    mode: \"onChange\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"\",\n      options: options,\n      onChange: newValue => onChange(newValue.value),\n      value: getValue(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(ErrorSelect, {\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SelectReact, \"EVdFVGHksgXe/P6bJcvl5Nj9Hl4=\", false, function () {\n  return [useForm];\n});\n\n_c = SelectReact;\nexport const ParamsForm = regist => {\n  if (regist == email) {}\n\n  return;\n};\n_c2 = ParamsForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SelectReact\");\n$RefreshReg$(_c2, \"ParamsForm\");","map":{"version":3,"sources":["C:/задачникJS/CLONES/MYSHOPFREE/myShopReact/ReactShop/react-shop/src/components/UI/Form/Form.jsx"],"names":["React","Controller","useForm","Select","ErrorSelect","options","value","label","param","require","SelectReact","onChange","error","getValue","find","item","control","mode","newValue","ParamsForm","regist","email"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,QAA4B,iBAA5B;;;AACA,MAAMC,OAAO,GAAG,CACb;AACGC,EAAAA,KAAK,EAAE,QADV;AAEGC,EAAAA,KAAK,EAAE;AAFV,CADa,EAKb;AACGD,EAAAA,KAAK,EAAE,KADV;AAEGC,EAAAA,KAAK,EAAE;AAFV,CALa,EASb;AACGD,EAAAA,KAAK,EAAE,UADV;AAEGC,EAAAA,KAAK,EAAE;AAFV,CATa,EAab;AACGD,EAAAA,KAAK,EAAE,QADV;AAEGC,EAAAA,KAAK,EAAE;AAFV,CAba,CAAhB;AAkBA,MAAMC,KAAK,GAAG;AACXC,EAAAA,OAAO,EAAE;AADE,CAAd;AAGA,OAAO,SAASC,WAAT,OAAiD;AAAA;;AAAA,MAA5B;AAAEC,IAAAA,QAAF;AAAYL,IAAAA,KAAZ;AAAmBM,IAAAA;AAAnB,GAA4B;;AACrD,QAAMC,QAAQ,GAAIP,KAAD,IAAWA,KAAK,GAAGD,OAAO,CAACS,IAAR,CAAcC,IAAD,IAAUA,IAAI,CAACT,KAAL,IAAcA,KAArC,CAAH,GAAiD,EAAlF;;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcd,OAAO,CAAC;AAAEe,IAAAA,IAAI,EAAE;AAAR,GAAD,CAA3B;AAEA,sBACG;AAAA,4BACG,QAAC,MAAD;AAAQ,MAAA,WAAW,EAAC,EAApB;AAAuB,MAAA,OAAO,EAAEZ,OAAhC;AAAyC,MAAA,QAAQ,EAAEa,QAAQ,IAAIP,QAAQ,CAACO,QAAQ,CAACZ,KAAV,CAAvE;AAAyF,MAAA,KAAK,EAAEO,QAAQ,CAACP,KAAD;AAAxG;AAAA;AAAA;AAAA;AAAA,YADH,eAEG,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEM;AAApB;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA,kBADH;AAMF;;GAVeF,W;UAEOR,O;;;KAFPQ,W;AAYhB,OAAO,MAAMS,UAAU,GAAIC,MAAD,IAAY;AACnC,MAAIA,MAAM,IAAIC,KAAd,EAAqB,CAEpB;;AACD;AAEF,CANM;MAAMF,U","sourcesContent":["import React from \"react\";\r\nimport { Controller, useForm } from 'react-hook-form'\r\nimport Select from \"react-select\";\r\nimport { ErrorSelect } from \"./ErrorsMessage\";\r\nconst options = [\r\n   {\r\n      value: \"russia\",\r\n      label: \"Россия\"\r\n   },\r\n   {\r\n      value: \"USA\",\r\n      label: \"США\"\r\n   },\r\n   {\r\n      value: \"beloruss\",\r\n      label: \"Белорусь\"\r\n   },\r\n   {\r\n      value: \"chehia\",\r\n      label: \"Чехия\"\r\n   }\r\n]\r\nconst param = {\r\n   require: \"поле обязательно для заполнения\"\r\n}\r\nexport function SelectReact({ onChange, value, error }) {\r\n   const getValue = (value) => value ? options.find((item) => item.value == value) : \"\"\r\n   const { control } = useForm({ mode: \"onChange\" })\r\n\r\n   return (\r\n      <>\r\n         <Select placeholder=\"\" options={options} onChange={newValue => onChange(newValue.value)} value={getValue(value)} />\r\n         <ErrorSelect error={error} />\r\n      </>\r\n   )\r\n}\r\n\r\nexport const ParamsForm = (regist) => {\r\n   if (regist == email) {\r\n\r\n   }\r\n   return\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
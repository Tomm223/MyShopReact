{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0437\\u0430\\u0434\\u0430\\u0447\\u043D\\u0438\\u043AJS\\\\CLONES\\\\MYSHOPFREE\\\\myShopReact\\\\ReactShop\\\\react-shop\\\\src\\\\components\\\\Registration\\\\FormGet.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useContext } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { AccountContext } from \"../../Context/AccountProvider\";\nimport { AuthContext } from \"../../Context/AuthProvider\";\nimport { useForm } from 'react-hook-form';\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\";\nimport { ErrorsMessage } from '../UI/Form/ErrorsMessage';\nimport { ParamsForm } from '../UI/Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FormGet() {\n  _s();\n\n  const {\n    singIn,\n    fromPage\n  } = useContext(AuthContext);\n  const {\n    usSetCheckId\n  } = useContext(AccountContext); //navigate\n\n  const navigate = useNavigate(); //form func\n\n  const NavigateTo = () => navigate(fromPage, {\n    replace: true\n  });\n\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit,\n    reset,\n    setError,\n    setFocus\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  async function getUser(data) {\n    const users = await GetAxios(\"userCard\");\n    const userMatch = await users.filter(item => item.email == data.email);\n\n    if (userMatch.length) {\n      const user = userMatch[0];\n\n      if (user.password == data.password) {\n        usSetCheckId(true);\n        singIn(user, NavigateTo);\n      } else {\n        setError(\"password\", {\n          message: \"пароль неверный\"\n        });\n        setFocus(\"password\");\n      }\n    } else {\n      alert(\"email-адресс не существует\");\n    }\n  }\n\n  const FormInputs = [{\n    title: \"Адресс Электронной почты\",\n    regist: \"email\"\n  }, {\n    title: \"Пароль\",\n    regist: \"password\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(getUser),\n      class: \"vhod__form\",\n      action: \"\",\n      children: [FormInputs.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"reg__label\",\n          children: [item.title, \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"reg__input\",\n            ...register(item.regist, ParamsForm(item.regist))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(ErrorsMessage, {\n            errors: errors,\n            regist: item.regist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"reg__btn\",\n        type: \"submit\",\n        value: \"\\u0432\\u043E\\u0439\\u0442\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\n_s(FormGet, \"Yu54W+ZCyIWAXCxVg73EQGbAdao=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c = FormGet;\nexport default FormGet;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormGet\");","map":{"version":3,"sources":["C:/задачникJS/CLONES/MYSHOPFREE/myShopReact/ReactShop/react-shop/src/components/Registration/FormGet.jsx"],"names":["React","useEffect","useRef","useState","useContext","useNavigate","useLocation","AccountContext","AuthContext","useForm","GetAxios","PostAxios","ErrorsMessage","ParamsForm","FormGet","singIn","fromPage","usSetCheckId","navigate","NavigateTo","replace","register","formState","errors","isValid","handleSubmit","reset","setError","setFocus","mode","getUser","data","users","userMatch","filter","item","email","length","user","password","message","alert","FormInputs","title","regist","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { AccountContext } from \"../../Context/AccountProvider\";\r\nimport { AuthContext } from \"../../Context/AuthProvider\";\r\nimport { useForm } from 'react-hook-form'\r\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\"\r\nimport { ErrorsMessage } from '../UI/Form/ErrorsMessage'\r\nimport { ParamsForm } from '../UI/Form/Form'\r\nfunction FormGet() {\r\n   const { singIn, fromPage } = useContext(AuthContext)\r\n   const { usSetCheckId } = useContext(AccountContext)\r\n   //navigate\r\n   const navigate = useNavigate()\r\n   //form func\r\n   const NavigateTo = () => navigate(fromPage, { replace: true })\r\n\r\n   const {\r\n      register,\r\n      formState: { errors, isValid },\r\n      handleSubmit,\r\n      reset,\r\n      setError,\r\n      setFocus\r\n   } = useForm({\r\n      mode: \"onChange\",\r\n   })\r\n\r\n\r\n   async function getUser(data) {\r\n      const users = await GetAxios(\"userCard\")\r\n      const userMatch = await users.filter((item) => item.email == data.email)\r\n      if (userMatch.length) {\r\n         const user = userMatch[0]\r\n         if (user.password == data.password) {\r\n            usSetCheckId(true)\r\n            singIn(user, NavigateTo)\r\n         } else {\r\n            setError(\"password\", { message: \"пароль неверный\" })\r\n            setFocus(\"password\")\r\n         }\r\n      }\r\n      else {\r\n         alert(\"email-адресс не существует\")\r\n      }\r\n   }\r\n\r\n   const FormInputs = [\r\n      {\r\n         title: \"Адресс Электронной почты\",\r\n         regist: \"email\"\r\n      },\r\n      {\r\n         title: \"Пароль\",\r\n         regist: \"password\",\r\n      }\r\n   ]\r\n\r\n   return (\r\n      <>\r\n         <form onSubmit={handleSubmit(getUser)} class=\"vhod__form\" action=\"\">\r\n            {FormInputs.map((item) => {\r\n               return (\r\n                  <label className=\"reg__label\">{item.title}:\r\n                     <input type=\"text\" className=\"reg__input\" {...register(item.regist, ParamsForm(item.regist))} />\r\n                     <ErrorsMessage errors={errors} regist={item.regist} />\r\n                  </label>\r\n               )\r\n            })}\r\n            <input class=\"reg__btn\" type=\"submit\" value=\"войти\" />\r\n         </form>\r\n      </>\r\n   )\r\n}\r\nexport default FormGet\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
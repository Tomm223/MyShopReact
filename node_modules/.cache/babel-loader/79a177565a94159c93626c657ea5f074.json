{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0437\\u0430\\u0434\\u0430\\u0447\\u043D\\u0438\\u043AJS\\\\CLONES\\\\MYSHOPFREE\\\\myShopReact\\\\ReactShop\\\\react-shop\\\\src\\\\components\\\\Registration\\\\FormPost.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useRef } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountContext } from \"../../Context/AccountProvider\";\nimport { AuthContext } from \"../../Context/AuthProvider\";\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\";\nimport { useForm, Controller } from 'react-hook-form';\nimport ReactSelect from 'react-select';\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\nimport FormInput from '../UI/Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getValueSelect = value => value ? options.find(option => option.value == value) : '';\n\nfunction FormPost() {\n  _s();\n\n  const {\n    usSetCheckId\n  } = useContext(AccountContext);\n  const {\n    singIn,\n    fromPage\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n\n  const NavigateTo = () => navigate(fromPage, {\n    replace: true\n  });\n\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit,\n    reset,\n    control\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  const useSubmitData = async data => {\n    return console.log(data);\n    const MassUsers = await GetAxios('userCard');\n    const massEmailMatch = await MassUsers.filter(item => item.email == data.email);\n\n    if (massEmailMatch.length) {\n      EmailError();\n    } else {\n      const body = {\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        password: data.password\n      };\n      const postedUser = await PostAxios('userCard', body);\n      singIn(postedUser, NavigateTo);\n      usSetCheckId(false);\n      reset();\n    }\n  };\n\n  const inputs = [{\n    title: \"Адресс Электронной почты\",\n    regist: \"email\"\n  }, {\n    title: \"Адресс Электронной почты\",\n    regist: \"email\"\n  }, {\n    title: \"Адресс Электронной почты\",\n    regist: \"email\"\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: inputs.map(item => {\n      return /*#__PURE__*/_jsxDEV(FormInput, {\n        title: item.title,\n        regist: item.regist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 20\n      }, this);\n    })\n  }, void 0, false);\n  /*\r\n  return (\r\n     <>\r\n        <form onSubmit={handleSubmit(useSubmitData)} class=\"reg__form\">\r\n           <label class=\"reg__label\" for=\"email\">Адресс Электронной почты:\r\n              <input class=\"reg__input\" id=\"reg__emal\" {...register(\"email\", paramEmal)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.['email'] && <div>{errors?.['email']?.message || inputErr('Email')}</div>} </div>\r\n           </label>\r\n           <label class=\"reg__label\" for=\"firstName\">Имя:\r\n              <input class=\"reg__input\" id=\"reg__f-name\" {...register(\"firstName\", paramsHook)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.firstName && <div>{errors?.firstName?.message || inputErr('firstName')}</div>} </div>\r\n           </label>\r\n           <label class=\"reg__label\" for=\"lastName\">Фамилия:\r\n              <input class=\"reg__input\" id=\"reg__l-name\" {...register(\"lastName\", paramsHook)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.lastName && <div>{errors?.lastName?.message || inputErr('lastName')}</div>} </div>\r\n           </label>\r\n           <label class=\"reg__label\" for=\"pass\">Пароль:\r\n              <input class=\"reg__input\" id=\"reg__pass\"  {...register(\"password\", paramsHook)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.password && <div>{errors?.password?.message || inputErr('password')}</div>} </div>\r\n           </label>\r\n           <label className=\"reg__label\"> Страна:\r\n              <Controller control={control} name=\"address.country\" rules={{ required: 'Поле обязательно для заполнения' }}\r\n                 render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                    <div>\r\n                       <ReactSelect placeholder='' options={options} value={getValueSelect(value)} onChange={newValue => onChange(newValue.value)} />\r\n                       <div className=\"reg__error\"> {error && <div>{error?.message || inputErr('address')}</div>} </div>\r\n                    </div>\r\n                 } />\r\n           </label>\r\n           <label class=\"reg__label\" for=\"address.city\">Город:\r\n              <input class=\"reg__input\"  {...register(\"address.city\", paramsHook)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.address?.city && <div>{errors?.address.city?.message || inputErr('password')}</div>} </div>\r\n           </label>\r\n           <label class=\"reg__label\" for=\"address.street\">Улица:\r\n              <input class=\"reg__input\"   {...register(\"address.street\", paramsHook)} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.address?.street && <div>{errors?.address.street?.message || inputErr('password')}</div>} </div>\r\n           </label>\r\n           <label class=\"reg__label\" for=\"address.house\">Дом:\r\n              <input class=\"reg__input\"   {...register(\"address.house\", {\r\n                 required: \"Поле обязательно к заполнению\"\r\n              })} type=\"text\" />\r\n              <div className=\"reg__error\"> {errors?.address?.house && <div>{errors?.address.house?.message || inputErr('password')}</div>} </div>\r\n           </label>\r\n           <button class=\"reg__btn\" type=\"submit\" disabled={!isValid} >зарегестрироваться </button>\r\n          </form>\r\n     </>\r\n  )*/\n}\n\n_s(FormPost, \"ONBftze3ZDzfSwzTeK8KUI8QbzA=\", false, function () {\n  return [useNavigate, useForm];\n});\n\n_c = FormPost;\nexport default FormPost;\n/*\r\n\r\nconst options = [\r\n   {\r\n      value: \"russia\",\r\n      label: \"Россия\"\r\n   },\r\n   {\r\n      value: \"USA\",\r\n      label: \"США\"\r\n   },\r\n   {\r\n      value: \"beloruss\",\r\n      label: \"Белорусь\"\r\n   },\r\n   {\r\n      value: \"chehia\",\r\n      label: \"Чехия\"\r\n   }\r\n]\r\n\r\nconst paramsHook = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   minLength: {\r\n      value: 3,\r\n      message: \"Минимум 3 символов\"\r\n   }\r\n}\r\nconst paramEmal = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   pattern: {\r\n      value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\r\n      message: \"Пожалуйста введите валидный email\"\r\n   }\r\n}\r\n\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"FormPost\");","map":{"version":3,"sources":["C:/задачникJS/CLONES/MYSHOPFREE/myShopReact/ReactShop/react-shop/src/components/Registration/FormPost.jsx"],"names":["React","useState","useEffect","useContext","useRef","useNavigate","AccountContext","AuthContext","GetAxios","PostAxios","useForm","Controller","ReactSelect","getValue","FormInput","getValueSelect","value","options","find","option","FormPost","usSetCheckId","singIn","fromPage","navigate","NavigateTo","replace","register","formState","errors","isValid","handleSubmit","reset","control","mode","useSubmitData","data","console","log","MassUsers","massEmailMatch","filter","item","email","length","EmailError","body","firstName","lastName","password","postedUser","inputs","title","regist","map"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { useRef } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AccountContext } from \"../../Context/AccountProvider\";\r\nimport { AuthContext } from \"../../Context/AuthProvider\";\r\n\r\nimport { GetAxios, PostAxios } from \"../../Fetch/Fetching\"\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport ReactSelect from 'react-select'\r\nimport { getValue } from \"@testing-library/user-event/dist/utils\";\r\nimport FormInput from '../UI/Form/Form'\r\n\r\nconst getValueSelect = (value) => value ? options.find((option) => option.value == value) : ''\r\nfunction FormPost() {\r\n   const { usSetCheckId } = useContext(AccountContext)\r\n   const { singIn, fromPage } = useContext(AuthContext)\r\n   const navigate = useNavigate()\r\n   const NavigateTo = () => navigate(fromPage, { replace: true })\r\n   const {\r\n      register,\r\n      formState: { errors, isValid, },\r\n      handleSubmit,\r\n      reset,\r\n      control\r\n   } = useForm({\r\n      mode: \"onChange\"\r\n   })\r\n\r\n\r\n   const useSubmitData = async (data) => {\r\n      return console.log(data)\r\n      const MassUsers = await GetAxios('userCard')\r\n      const massEmailMatch = await MassUsers.filter((item) => item.email == data.email)\r\n      if (massEmailMatch.length) {\r\n         EmailError()\r\n      }\r\n      else {\r\n         const body = {\r\n            email: data.email,\r\n            firstName: data.firstName,\r\n            lastName: data.lastName,\r\n            password: data.password\r\n         }\r\n         const postedUser = await PostAxios('userCard', body)\r\n         singIn(postedUser, NavigateTo)\r\n         usSetCheckId(false)\r\n         reset()\r\n      }\r\n   }\r\n\r\n   const inputs = [\r\n      {\r\n         title: \"Адресс Электронной почты\",\r\n         regist: \"email\"\r\n      },\r\n      {\r\n         title: \"Адресс Электронной почты\",\r\n         regist: \"email\"\r\n      },\r\n      {\r\n         title: \"Адресс Электронной почты\",\r\n         regist: \"email\"\r\n      }\r\n   ]\r\n\r\n   return (\r\n      <>\r\n         {inputs.map((item) => {\r\n            return <FormInput title={item.title} regist={item.regist} />\r\n         })}\r\n      </>\r\n   )\r\n\r\n   /*\r\n   return (\r\n      <>\r\n         <form onSubmit={handleSubmit(useSubmitData)} class=\"reg__form\">\r\n            <label class=\"reg__label\" for=\"email\">Адресс Электронной почты:\r\n               <input class=\"reg__input\" id=\"reg__emal\" {...register(\"email\", paramEmal)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.['email'] && <div>{errors?.['email']?.message || inputErr('Email')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"firstName\">Имя:\r\n               <input class=\"reg__input\" id=\"reg__f-name\" {...register(\"firstName\", paramsHook)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.firstName && <div>{errors?.firstName?.message || inputErr('firstName')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"lastName\">Фамилия:\r\n               <input class=\"reg__input\" id=\"reg__l-name\" {...register(\"lastName\", paramsHook)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.lastName && <div>{errors?.lastName?.message || inputErr('lastName')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"pass\">Пароль:\r\n               <input class=\"reg__input\" id=\"reg__pass\"  {...register(\"password\", paramsHook)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.password && <div>{errors?.password?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <label className=\"reg__label\"> Страна:\r\n               <Controller control={control} name=\"address.country\" rules={{ required: 'Поле обязательно для заполнения' }}\r\n                  render={({ field: { onChange, value }, fieldState: { error } }) =>\r\n                     <div>\r\n                        <ReactSelect placeholder='' options={options} value={getValueSelect(value)} onChange={newValue => onChange(newValue.value)} />\r\n                        <div className=\"reg__error\"> {error && <div>{error?.message || inputErr('address')}</div>} </div>\r\n                     </div>\r\n                  } />\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.city\">Город:\r\n               <input class=\"reg__input\"  {...register(\"address.city\", paramsHook)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.address?.city && <div>{errors?.address.city?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.street\">Улица:\r\n               <input class=\"reg__input\"   {...register(\"address.street\", paramsHook)} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.address?.street && <div>{errors?.address.street?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <label class=\"reg__label\" for=\"address.house\">Дом:\r\n               <input class=\"reg__input\"   {...register(\"address.house\", {\r\n                  required: \"Поле обязательно к заполнению\"\r\n               })} type=\"text\" />\r\n               <div className=\"reg__error\"> {errors?.address?.house && <div>{errors?.address.house?.message || inputErr('password')}</div>} </div>\r\n            </label>\r\n            <button class=\"reg__btn\" type=\"submit\" disabled={!isValid} >зарегестрироваться </button>\r\n\r\n         </form>\r\n      </>\r\n   )*/\r\n}\r\nexport default FormPost\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nconst options = [\r\n   {\r\n      value: \"russia\",\r\n      label: \"Россия\"\r\n   },\r\n   {\r\n      value: \"USA\",\r\n      label: \"США\"\r\n   },\r\n   {\r\n      value: \"beloruss\",\r\n      label: \"Белорусь\"\r\n   },\r\n   {\r\n      value: \"chehia\",\r\n      label: \"Чехия\"\r\n   }\r\n]\r\n\r\nconst paramsHook = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   minLength: {\r\n      value: 3,\r\n      message: \"Минимум 3 символов\"\r\n   }\r\n}\r\nconst paramEmal = {\r\n   required: \"Поле обязательно к заполнению\",\r\n   pattern: {\r\n      value: /^((([0-9A-Za-z]{1}[-0-9A-z\\.]{1,}[0-9A-Za-z]{1})|([0-9А-Яа-я]{1}[-0-9А-я\\.]{1,}[0-9А-Яа-я]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/u,\r\n      message: \"Пожалуйста введите валидный email\"\r\n   }\r\n}\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}